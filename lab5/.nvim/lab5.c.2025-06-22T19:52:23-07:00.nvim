#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

struct header {
  uint64_t size;
  struct header *next;
  int id;
};

void initialize_block(struct header *block, uint64_t size, struct header *next,
                      int id) {
  block->size = size;
  block->next = next;
  block->id = id;
}

int find_first_fit(struct header *free_list_ptr, uint64_t size) {
  // TODO: Implement first fit
  while (free_list_ptr != NULL) {
    if (free_list_ptr->size >= size) {
      return free_list_ptr->id;
    }
    free_list_ptr = free_list_ptr->next;
  }
  return -1;
}

int find_best_fit(struct header *free_list_ptr, uint64_t size) {
  int best_fit_id = -1;
  uint64_t best_fit_size = UINT64_MAX;

  while (free_list_ptr != NULL) {
    if (free_list_ptr->size && free_list_ptr->size < best_fit_size) {
      best_fit_id = free_list_ptr->id;
      best_fit_size = free_list_ptr->size;
    }
    free_list_ptr = free_list_ptr->next;
    // TODO: Implement best fit
  
  }
  return best_fit_id;
}
int find_worst_fit(struct header *free_list_ptr, uint64_t size) {
  int worst_fit_id = -1;
  uint64_t worst_fit_size = 0;
  // TODO: Implement worst fit
 
   10
   11 void initialize_block(struct header *block, uint64_t size, struct header *next,
   12 ┆ ┆ ┆ ┆ ┆ ┆ ┆ ┆ ┆ ┆ ┆ int id) {
   13 ┆ block->size = size;
   14 ┆ block->next = next;
   15 ┆ block->id = id;
   16 }
   17
   18 int find_first_fit(struct header *free_list_ptr, uint64_t size) {
   19 ┆ // TODO: Implement first fit
   20 ┆ while (free_list_ptr != NULL) {
   21 ┆ ┆ if (free_list_ptr->size >= size) {
   22 ┆ ┆ ┆ return free_list_ptr->id;
   23 ┆ ┆ }
   24 ┆ ┆ free_list_ptr = free_list_ptr->next;
   25 ┆ }
   26 ┆ return -1;
   27 }
   28
   29 int find_best_fit(struct header *free_list_ptr, uint64_t size) {
   30 ┆ int best_fit_id = -1;
   31 ┆ uint64_t best_fit_size = UINT64_MAX;
   32 ┆
   33 ┆ while (free_list_ptr != NULL) {
   34 ┆ ┆ if (free_list_ptr->size && free_list_ptr->size < best_fit_size) {
   35 ┆ ┆ ┆ best_fit_id = free_list_ptr->id;
W  36 ┆ ┆ ┆ best_fit_size = free_list_ptr->size;     ■ Value stored to 'best_fit_size' is never read [clang-analyzer-deadcode.DeadStores]
   37 ┆ ┆ }
W  38 ┆ ┆ free_list_ptr = free_list_ptr->next;     ■ Value stored to 'free_list_ptr' is never read [clang-analyzer-deadcode.DeadStores]
   39 ┆ ┆ // TODO: Implement best fit
   40 ┆ ┆ return best_fit_id;┆ if (free_list_ptr->size && free_list_ptr->size < best_fit_size) {
   35 ┆ ┆ ┆ best_fit_id = free_list_ptr->id;
W  36 ┆ ┆ ┆ best_fit_size = free_list_ptr->size;     ■ Value stored to 'best_fit_size' is never read [clang-analyzer-deadcode.DeadStores]
   37 ┆ ┆ }
W  38 ┆ ┆ free_list_ptr = free_list_ptr->next;     ■ Value stored to 'free_list_ptr' is never read [clang-analyzer-deadcode.DeadStores]
   39 ┆ ┆ // TODO: Implement best fit
   40 ┆ ┆ return best_fit_id;
   41 ┆ }
W  42 }     ■■ non-void function does not return a value in all control paths [-Wreturn-type]
   43 int find_worst_fit(struct header *free_list_ptr, uint64_t size) {
   44 ┆ int worst_fit_id = -1;
   45 ┆ uint64_t worst_fit_size = 0;
   46 ┆ // TODO: Implement worst fit
   47 ┆
E  48 ┆  10     ■ expected ';' after expression
E  49 ┆  11 void initialize_block(struct header *block, uint64_t size, struct header *next,     ■ expected ';' after expression
E  50 ┆  12 ┆ ┆ ┆ ┆ ┆ ┆ ┆ ┆ ┆ ┆ ┆ int id) {     ■■■■■■■■■■■■■■ function definition is not allowed here
E  51 ┆  13 ┆ block->size = size;     ■ unexpected character <U+2506>
E  52 ┆  14 ┆ block->next = next;     ■ unexpected character <U+2506>
E  53 ┆  15 ┆ block->id = id;     ■ unexpected character <U+2506>
   54 ┆  16 }
   55 ┆  17
   56 ┆  18 int find_first_fit(struct header *free_list_ptr, uint64_t size) {
   57 ┆  19 ┆ // TODO: Implement first fit
   58 ┆  20 ┆ while (free_list_ptr != NULL) {
   59 ┆  21 ┆ ┆ if (free_list_ptr->size >= size) {
   60 ┆  22 ┆ ┆ ┆ return free_list_ptr->id;
   61 ┆  23 ┆ ┆ }
   62 ┆  24 ┆ ┆ free_list_ptr = free_list_ptr->next;
   63 ┆  25 ┆ }
   64 ┆  26 ┆ return -1;
   65 ┆  27 } while (free_list_ptr != NULL) {
    if (free_list_ptr->size >= size && free_list_ptr->size > worst_fit_size) {
      worst_fit_id = free_list_ptr->id;
      worst_fit_size = free_list_ptr->size;
    }
    free_list_ptr = free_list_ptr->next;
  }

  return worst_fit_id;
}

int main(void) {

  struct header *free_block1 = (struct header *)malloc(sizeof(struct header));
  struct header *free_block2 = (struct header *)malloc(sizeof(struct header));
  struct header *free_block3 = (struct header *)malloc(sizeof(struct header));
  struct header *free_block4 = (struct header *)malloc(sizeof(struct header));
  struct header *free_block5 = (struct header *)malloc(sizeof(struct header));

  initialize_block(free_block1, 6, free_block2, 1);
  initialize_block(free_block2, 12, free_block3, 2);
  initialize_block(free_block3, 24, free_block4, 3);
  initialize_block(free_block4, 8, free_block5, 4);
  initialize_block(free_block5, 4, NULL, 5);

  struct header *free_list_ptr = free_block1;

  int first_fit_id = find_first_fit(free_list_ptr, 7);
  int best_fit_id = find_best_fit(free_list_ptr, 7);
  int worst_fit_id = find_worst_fit(free_list_ptr, 7);

  // TODO: Print out the IDs
  printf("The ID for First-Fit algorithm is: %d\n", first_fit_id);
  printf("The ID for Best-Fit algorithm is: %d\n", best_fit_id);
  printf("The ID for Worst-Fit algorithm is: %d\n", worst_fit_id);

  return 0;
}
